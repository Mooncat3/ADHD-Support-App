import api from "@/scripts/api";
import * as SAF from 'expo-file-system';
import * as FileSystem from 'expo-file-system';

export const handleGetStatistics = async (patientId: any, dates: { start: string, end: string }, setModalMessage: (message: string) => void, setModalVisible: (visible: boolean) => void) => { 
    console.log("–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏");

    try {
        const statistics = await api.getPatientStatistics(patientId, dates.start, dates.end);
        console.log(statistics);

        if (statistics) {
            const permissions = await SAF.StorageAccessFramework.requestDirectoryPermissionsAsync();

            if (!permissions.granted) {
                alert("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ");
                return;
            }

            const fileUri = FileSystem.documentDirectory + 'statistics.pdf';
            console.log(fileUri);

            await FileSystem.writeAsStringAsync(fileUri, statistics, {
                encoding: FileSystem.EncodingType.Base64,
            });

            const newFileUri = await SAF.StorageAccessFramework.createFileAsync(
                permissions.directoryUri,
                'statistics.pdf',
                'application/pdf'
            );

            await FileSystem.writeAsStringAsync(newFileUri, statistics, {
                encoding: FileSystem.EncodingType.Base64,
            });

            alert("PDF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É üìÅ");
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.");
        }
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
        setModalMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        setModalVisible(true);
    }
};